" .vimrc config file
" Dennis Bakhuis

call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-commentary' " comment stuff with gc / gcc commands. love it!
Plug 'sjl/gundo.vim'        " visual tree undo addon

Plug 'mileszs/ack.vim'      " use ag (silver searcher) in vim

Plug 'junegunn/fzf.vim'     " fuzzy file search

Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'numirias/semshi', {'do': ':UpdateRemotePlugins'}

Plug 'chase/vim-ansible-yaml'
Plug 'glench/vim-jinja2-syntax'

Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'turbio/bracey.vim', {'do': 'npm install --prefix server'}

" Colorschemes
Plug 'morhetz/gruvbox'

call plug#end()


"""""""""""""""""
"" Color settings
"""""""""""""""""
colorscheme gruvbox
let g:gruvbox_italic=1
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif
" let g:gruvbox_contrast_dark = 'hard'


""""""""""
"" General
""""""""""
syntax enable              " enable syntax highlighting
set tabstop=2              " number of spaces per tab symbol in file
set softtabstop=2          " number of spaces per tab press
set shiftwidth=2          " number of spaces per tab press
set expandtab	           " convert tabs to spaces (tabs are bad okay?)
set number	               " enable line numbering
set showcmd 	           " show the last command in bottom
filetype plugin indent on  " load filetype-specific indent files
set ttyfast                " faster tty draws, probably already on
set lazyredraw             " only redraw screen when needed
set showmatch              " highlight matching brackets/parethesis/curlies
if has('unix')
  set clipboard=unnamedplus
else
  set clipboard=unnamed    " combine default clipboard with system clipboard
endif
set mouse=a                " use mouse as well
let mapleader=","          " leader is comma
set laststatus=2           " always display the statusbar
set hidden                 " hide files in bg instead of closing them
set history=1000           " increase undo history to 1000
set dir=~/.cache/vim       " directory to store swap files
set backupdir=~/.cache/vim " directory to store backups
" remove trailing white space before save
autocmd BufWritePre * %s/\s\+$//e
set cursorline	           " highlight current line of cursor
set cursorcolumn	       " highlight current column of cursor
" visual autocomplete in command menu
set wildmenu
set wildmode=longest:full,list
set scrolloff=8            " Keep 3 lines below and above the cursor
" turn off auto commenting for ever. annoying as fuck
autocmd BufNewFile,BufRead,FileType,OptionSet * set formatoptions-=cro
autocmd BufNewFile,BufRead,FileType,OptionSet * setlocal formatoptions-=cro
set backspace=indent,eol,start " backspace works like regular backspace
set nowrap                 " turn off word wrap
set timeoutlen=1000 ttimeoutlen=0  " turn off delay on escape

let g:python3_host_prog='/home/dennis/miniconda3/envs/vim/bin/python'

""""""""""""""""""
"" Python settings
""""""""""""""""""
" au BufNewFile,BufRead *.py
"     \ set tabstop=4
"     \ set softtabstop=4
"     \ set shiftwidth=4
"     \ set textwidth=79
"     \ set expandtab
"     \ set autoindent
"     \ set fileformat=unix

"""""""""
"" Search
"""""""""
set incsearch                 " search as characters are entered
set hlsearch                  " highlight matches
" stop highlighting your searched stuff using <leader> space
nnoremap <space> :nohlsearch<CR>

" open Ack search
nnoremap <leader>a :Ack<space>
let g:ackprg = 'ag --vimgrep' " use ag (silver-searcher) with ack plugin

" Fuzzy file shortcuts in buffers / files / tags
set rtp+=/usr/local/opt/fzf
nmap ; :Buffers<CR>
nmap <Leader>t :Files<CR>
nmap <Leader>r :Tags<CR>

""""""""""
"" Folding
""""""""""
set foldenable          " enable folding
set foldlevelstart=10   " open most folds by default
set foldnestmax=10      " 10 nested fold max
set foldmethod=indent   " fold based on indent level
" space open/closes folds
nnoremap <leader><space> za

"""""""""""
"" Movement
"""""""""""
" move vertically by visual line
nnoremap j gj
nnoremap k gk

""""""""""""
"" Shortcuts
""""""""""""
" toggle gundo
nnoremap <leader>u :GundoToggle<CR>
let g:gundo_prefer_python3 = 1 " gundo should use python3
" edit vimrc/zshrc and load vimrc bindings
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>ez :vsp ~/dotfiles/zsh/zshrc.default<CR>
" Automatically source vimrc on save.
autocmd! bufwritepost $MYVIMRC source $MYVIMRC
" save session
nnoremap <leader>S :mksession<CR>
" spell check
" map <leader>s :setlocal spell! spelllang=en_us<CR>

"""""""""
"" Splits
"""""""""
" navigate splits using ctrl hjkl instead ctrl w ctrl hjkl
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
set splitbelow          " open new horizontal splits below
set splitright          " open new vertical splits to the right

""""""""""
"" vim-coc
""""""""""
" TextEdit might fail if hidden is not set.
set hidden

" Some servers have issues with backup files, see #649.
set nobackup
set nowritebackup

" Give more space for displaying messages.
" set cmdheight=2

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Don't pass messages to |ins-completion-menu|.
set shortmess+=c

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of LS, ex: coc-tsserver
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocAction('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
" set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>



"" Airline
let g:airline_powerline_fonts = 1
" let g:airline_theme='bubblegum'
let g:airline_theme='gruvbox'
let g:airline_skip_empty_sections = 1
let g:airline#extensions#coc#enabled = 0
" let g:airline#extensions#tabline#buffer_nr_show = 1
" let g:airline#extensions#tabline#enabled = 1
" let g:airline#extensions#tabline#left_sep = ''
" let g:airline#extensions#tabline#left_alt_sep = ''
" let g:airline#extensions#tabline#right_sep = ''
" let g:airline#extensions#tabline#right_alt_sep = ''
" let g:airline_section_z = "%3p%% %l:%c"
set noshowmode
let g:airline_mode_map = {
    \ '__' : '-',
    \ 'n'  : 'N',
    \ 'i'  : 'I',
    \ 'R'  : 'R',
    \ 'c'  : 'C',
    \ 'v'  : 'V',
    \ 'V'  : 'V',
    \ '' : 'V',
    \ 's'  : 'S',
    \ }
let g:airline#parts#ffenc#skip_expected_string='utf-8[unix]'
" let g:airline#extensions#wordcount#enabled = 1
" let g:airline#extensions#wordcount#formatter#default#fmt = '%dw'
" let g:airline#extensions#wordcount#filetypes = ''
